<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[Eliza's Stuff]]></title>
<description><![CDATA[Eliza's Stuff]]></description>
<link>https://eliza.sh/</link>
<lastBuildDate>Sun, 31 Jul 2022 20:43:11 -0700</lastBuildDate>
<item>
  <title><![CDATA[Using Unity Editor With Emacs (Part 2)]]></title>
  <description><![CDATA[
<p>
A while ago, I wrote an <a href="https://eliza.sh/2021-06-01-using-unity-editor-with-emacs.html">article about using Unity with Emacs</a>. While this article
is still useful, I have encountered a few more issues with Unity, and learned
better ways to deal with its unique demands. It is written with the assumption
that you have already read the aforementioned article.
</p>

<div id="outline-container-org-aab9db34-214d-4f75-ab72-3f928a9eb86a" class="outline-2">
<h2 id="org-aab9db34-214d-4f75-ab72-3f928a9eb86a">A new "solution" solution: The Rider plugin</h2>
<div class="outline-text-2" id="text-org-aab9db34-214d-4f75-ab72-3f928a9eb86a">
<p>
I previously mentioned an issue with the Visual Studio Code “emulation” method
of Emacs integration: having to set <code>FrameworkPathOverride</code> due to some mono
environment weirdness. There are additional problems with the VS Code support
package: the <a href="https://docs.microsoft.com/sr-cyrl-rs/dotnet/csharp/language-reference/compiler-options/miscellaneous">csc.rsp</a> file is not taken into account when generating the project
build options, meaning that if you want to, for example, <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/language#nullable">enable C# 8 nullable
reference types</a>, OmniSharp will not pick up these options and loudly complain.
</p>

<p>
The JetBrains Rider IDE support package generates solution and project files
which makes these problems disappear. Unfortunately, it’s not sufficient enough
to make a simple shim which execs its command line arguments as in the solution
described in the previous article; if Unity thinks it’s using Rider, it will
invoke the binary using hardcoded command-line options. This unfortunately
necessitated the creation of a slightly less trivial tool: <a href="https://github.com/elizagamedev/rider2emacs">rider2emacs</a>. This is
a simple Rust tool which translates command-line arguments from Rider to
emacsclient. The latest version of <a href="https://github.com/elizagamedev/unity.el">unity.el</a> advises this approach instead of
using the <code>code</code> shim.
</p>
</div>
</div>

<div id="outline-container-org-85064b54-de87-4aed-b752-c5d7c1e92f5d" class="outline-2">
<h2 id="org-85064b54-de87-4aed-b752-c5d7c1e92f5d">Issues with <code>lsp-mode</code> finding the project root</h2>
<div class="outline-text-2" id="text-org-85064b54-de87-4aed-b752-c5d7c1e92f5d">
<p>
Even if you followed the instructions down to the letter in my previous blog
post, you may have run into an issue where LSP still doesn’t work properly. One
potential culprit is that <code>lsp-mode</code> did not correctly guess the root of the
project, even with <code>lsp-auto-guess-root</code> enabled; the same might happen if you
use <a href="https://github.com/joaotavora/eglot">eglot</a> instead. This will likely happen if you aren’t using Git or some other
VCS in your project.
</p>

<p>
From my understanding, both of these packages depend on determining the project
root by using the built-in <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Projects.html">project.el</a> package. With no recognized VCS set up,
project.el is unable to determine the root, and OmniSharp flounders as a result.
The simplest solution, of course, is to just set up VCS in your project. (You
ought to be doing this anyway!) But if that is not an option for you, the Emacs
manual provides <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/EDE.html">guidance on using EDE (Emacs Development Environment) instead</a>,
but this is quite a heavyweight solution.
</p>

<p>
There’s a third option as well: the <code>project-find-functions</code> variable. To use
this, you essentially create a new project.el “backend” specific to C# projects.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #81A1C1;">(</span><span style="color: #81A1C1;">cl-defmethod</span> <span style="color: #88C0D0;">project-root</span> <span style="color: #B48EAD;">(</span><span style="color: #A3BE8C;">(</span>project <span style="color: #5D80AE;">(</span>head csharp<span style="color: #5D80AE;">)</span><span style="color: #A3BE8C;">)</span><span style="color: #B48EAD;">)</span>
  <span style="color: #B48EAD;">(</span>cdr project<span style="color: #B48EAD;">)</span><span style="color: #81A1C1;">)</span>

<span style="color: #81A1C1;">(</span><span style="color: #81A1C1;">defun</span> <span style="color: #88C0D0;">my/project-try-csharp</span> <span style="color: #B48EAD;">(</span>dir<span style="color: #B48EAD;">)</span>
  <span style="color: #B48EAD;">(</span><span style="color: #81A1C1;">if-let</span> <span style="color: #A3BE8C;">(</span><span style="color: #5D80AE;">(</span>root
            <span style="color: #8FBCBB;">(</span>locate-dominating-file
             dir <span style="color: #81A1C1;">(</span><span style="color: #81A1C1;">lambda</span> <span style="color: #B48EAD;">(</span>dir<span style="color: #B48EAD;">)</span>
                   <span style="color: #B48EAD;">(</span>directory-files dir nil <span style="color: #A3BE8C; font-style: italic;">"\\.sln$"</span> t 1<span style="color: #B48EAD;">)</span><span style="color: #81A1C1;">)</span><span style="color: #8FBCBB;">)</span><span style="color: #5D80AE;">)</span><span style="color: #A3BE8C;">)</span>
      <span style="color: #A3BE8C;">(</span>cons 'csharp root<span style="color: #A3BE8C;">)</span><span style="color: #B48EAD;">)</span><span style="color: #81A1C1;">)</span>

<span style="color: #81A1C1;">(</span>add-hook 'project-find-functions #'my/project-try-csharp<span style="color: #81A1C1;">)</span>
</pre>
</div>

<p>
For more information about project backends, <a href="https://vannilla.org/write/1609258895/article.html">this article</a> is invaluable reading!
</p>
</div>
</div>
<div class="taglist"><a href="https://eliza.sh/tags.html">Tags</a>: <a href="https://eliza.sh/tag-unity.html">unity</a> <a href="https://eliza.sh/tag-emacs.html">emacs</a> <a href="https://eliza.sh/tag-csharp.html">csharp</a> </div>]]></description>
  <category><![CDATA[unity]]></category>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[csharp]]></category>
  <link>https://eliza.sh/2022-07-31-using-unity-editor-with-emacs-(part-2).html</link>
  <guid>https://eliza.sh/2022-07-31-using-unity-editor-with-emacs-(part-2).html</guid>
  <pubDate>Sun, 31 Jul 2022 18:32:00 -0700</pubDate>
</item>
<item>
  <title><![CDATA[Using StyleCop with Unity]]></title>
  <description><![CDATA[
<p>
Sometimes, it feels like you have to fight tooth and nail to get Unity to <a href="https://eliza.sh/2021-06-01-using-unity-editor-with-emacs.html">do the
right thing</a>. Using <a href="https://github.com/DotNetAnalyzers/StyleCopAnalyzers">StyleCop Analyzers</a> in a project is no exception.
</p>

<div id="outline-container-org-d9f3d339-7c64-4c2c-8d72-52fef8584f67" class="outline-2">
<h2 id="org-d9f3d339-7c64-4c2c-8d72-52fef8584f67">Foreground: What is StyleCop?</h2>
<div class="outline-text-2" id="text-org-d9f3d339-7c64-4c2c-8d72-52fef8584f67">
<p>
StyleCop.Analyzers is technically a static analysis tool for C#, but mostly
does code style enforcement. It's comparable to <a href="https://eslint.org/">ESLint</a>, a similar tool for
JavaScript.
</p>

<p>
StyleCop "Classic" was an implementation of the same idea, but
StyleCop.Analyzers uses the .NET Compiler Platform for code analysis, making it
pluggable into the <a href="https://www.omnisharp.net/">OmniSharp language server</a>.
</p>

<p>
<b>Sidenote:</b> If you are not using OmniSharp for your Unity code, you're missing
out on some of the best tooling for any programming language, period. Also, this
guide won't be useful to you until you have it configured, anyway. Visual Studio
and <a href="https://www.jetbrains.com/resharper/">ReSharper</a> have support built in, but other editors require some tweaking. My
article on using <a href="https://eliza.sh/2021-06-01-using-unity-editor-with-emacs.html">Unity/OmniSharp/Emacs</a> might be helpful even if you aren't an
Emacs user.
</p>
</div>
</div>

<div id="outline-container-org-d5f7d480-7b0c-4026-8331-8622db4d8b8d" class="outline-2">
<h2 id="org-d5f7d480-7b0c-4026-8331-8622db4d8b8d">How is this normally done?</h2>
<div class="outline-text-2" id="text-org-d5f7d480-7b0c-4026-8331-8622db4d8b8d">
<p>
In modern, non-Unity C# projects, this is typically done by just adding a
reference to StyleCop.Analyzers to the csproj file to be retrieved via NuGet.
</p>

<div class="org-src-container">
<pre class="src src-xml">&lt;<span style="color: #88C0D0;">Project</span> <span style="color: #D8DEE9;">Sdk</span>=<span style="color: #A3BE8C; font-style: italic;">"Microsoft.NET.Sdk"</span>&gt;
  &lt;<span style="color: #88C0D0;">ItemGroup</span>&gt;
    &lt;<span style="color: #88C0D0;">PackageReference</span> <span style="color: #D8DEE9;">Include</span>=<span style="color: #A3BE8C; font-style: italic;">"StyleCop.Analyzers"</span> <span style="color: #D8DEE9;">Version</span>=<span style="color: #A3BE8C; font-style: italic;">"1.2.0-beta.376"</span>&gt;
      &lt;<span style="color: #88C0D0;">IncludeAssets</span>&gt;
        runtime; build; native; contentfiles; analyzers; buildtransitive
      &lt;/<span style="color: #88C0D0;">IncludeAssets</span>&gt;
      &lt;<span style="color: #88C0D0;">PrivateAssets</span>&gt;all&lt;/<span style="color: #88C0D0;">PrivateAssets</span>&gt;
    &lt;/<span style="color: #88C0D0;">PackageReference</span>&gt;
    &lt;<span style="color: #88C0D0;">AdditionalFiles</span> <span style="color: #D8DEE9;">Include</span>=<span style="color: #A3BE8C; font-style: italic;">"stylecop.json"</span> /&gt;
  &lt;/<span style="color: #88C0D0;">ItemGroup</span>&gt;
&lt;/<span style="color: #88C0D0;">Project</span>&gt;
</pre>
</div>

<p>
Two lines in particular here are relevant for Unity: <code>&lt;PackageReference&gt;</code> and
<code>&lt;AdditionalFiles&gt;</code>.
</p>

<p>
The <code>&lt;PackageReference&gt;</code> line informs the dotnet SDK which NuGet package to
download. At the time of writing, it's not possible to use NuGet in this manner
with Unity. We can instead download the StyleCop NuGet package and copy the
relevant DLL files. Using the NuGet CLI:
</p>

<div class="org-src-container">
<pre class="src src-sh">nuget install StyleCop.Analyzers -Version 1.2.0-beta.406 -Framework netstandard2.1
</pre>
</div>

<p>
Note that you may want to specify a different version or framework.
</p>

<p>
Adding the reference to the DLL directly would normally be as simple as the
following csproj configuration:
</p>

<div class="org-src-container">
<pre class="src src-xml">&lt;<span style="color: #88C0D0;">Project</span> <span style="color: #D8DEE9;">Sdk</span>=<span style="color: #A3BE8C; font-style: italic;">"Microsoft.NET.Sdk"</span>&gt;
  &lt;<span style="color: #88C0D0;">ItemGroup</span>&gt;
    &lt;<span style="color: #88C0D0;">Analyzer</span> <span style="color: #D8DEE9;">Include</span>=<span style="color: #A3BE8C; font-style: italic;">"StyleCop/StyleCop.Analyzers.dll"</span> /&gt;
  &lt;/<span style="color: #88C0D0;">ItemGroup</span>&gt;
&lt;/<span style="color: #88C0D0;">Project</span>&gt;
</pre>
</div>

<p>
&#x2026;except that Unity will clobber these changes anytime it regenerates project
files. More on that later.
</p>

<p>
The other important line, the <code>&lt;AdditionalFiles&gt;</code> include for stylecop.json, is
documented <a href="https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/Configuration.md">here</a>. The simplest possible stylecop.json file looks like this:
</p>

<div class="org-src-container">
<pre class="src src-json"><span style="color: #81A1C1;">{</span>
  <span style="color: #81A1C1;">"$schema"</span>: <span style="color: #A3BE8C; font-style: italic;">"https://raw.githubusercontent.com/DotNetAnalyzers/StyleCopAnalyzers/master/StyleCop.Analyzers/StyleCop.Analyzers/Settings/stylecop.schema.json"</span>
<span style="color: #81A1C1;">}</span>
</pre>
</div>

<p>
We will now focus on the issue of the clobbered configuration.
</p>
</div>
</div>

<div id="outline-container-org-db464226-866d-47aa-9166-d077bba8eeec" class="outline-2">
<h2 id="org-db464226-866d-47aa-9166-d077bba8eeec">Previous solutions that no longer work</h2>
<div class="outline-text-2" id="text-org-db464226-866d-47aa-9166-d077bba8eeec">
<p>
Elsewhere online, you may see solutions that use the undocumented
<code>OnGeneratedCSProject</code> hook to modify csproj files to add a reference to the
assembly (<a href="https://github.com/ImLp/Unity-StyleCop">example 1</a>, <a href="https://www.nowsprinting.com/entry/2021/11/01/083258">example 2</a>). Unfortunately, this hook was <a href="https://github.com/Unity-Technologies/UnityCsReference/commit/0b34d6caff4a5ca3253c2327cee34c08a52ba745">unceremoniously
dropped</a> in the 2021.1 series.
</p>
</div>
</div>

<div id="outline-container-org-e2cfc7cd-42d2-48a7-acfd-fe6c8a464757" class="outline-2">
<h2 id="org-e2cfc7cd-42d2-48a7-acfd-fe6c8a464757">Directory.Build.props to the rescue</h2>
<div class="outline-text-2" id="text-org-e2cfc7cd-42d2-48a7-acfd-fe6c8a464757">
<p>
Fortunately, we can place these configuration changes in a special file:
<a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019#directorybuildprops-and-directorybuildtargets">Directory.Build.props</a>. Essentially, this is an XML file that gets pulled in with
every csproj file in the directory its located without actually modifying those
files.
</p>

<p>
The solution is that simple: we can create a Directory.Build.props file to make
the above configuration changes.
</p>

<div class="org-src-container">
<pre class="src src-xml">&lt;<span style="color: #88C0D0;">Project</span>&gt;
  &lt;<span style="color: #88C0D0;">ItemGroup</span>&gt;
    &lt;<span style="color: #88C0D0;">Analyzer</span> <span style="color: #D8DEE9;">Include</span>=<span style="color: #A3BE8C; font-style: italic;">"StyleCop/StyleCop.Analyzers.dll"</span> /&gt;
    &lt;<span style="color: #88C0D0;">AdditionalFiles</span> <span style="color: #D8DEE9;">Include</span>=<span style="color: #A3BE8C; font-style: italic;">"stylecop.json"</span> /&gt;
  &lt;/<span style="color: #88C0D0;">ItemGroup</span>&gt;
&lt;/<span style="color: #88C0D0;">Project</span>&gt;
</pre>
</div>

<p>
The solution turns out to be rather simple in the end, fortunately.
</p>

<p>
Now with any LSP-enabled editor, you should begin to see the various StyleCop
lints in your code. You may need to enable analyzers by creating or adding to
the omnisharp.json file in the same directory as your
projects/Directory.Build.props:
</p>

<div class="org-src-container">
<pre class="src src-json"><span style="color: #81A1C1;">{</span>
  <span style="color: #81A1C1;">"RoslynExtensionsOptions"</span>: <span style="color: #B48EAD;">{</span>
    <span style="color: #81A1C1;">"enableAnalyzersSupport"</span>: <span style="color: #81A1C1;">true</span>
  <span style="color: #B48EAD;">}</span>
<span style="color: #81A1C1;">}</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org-b851af71-d447-4b8f-8eac-13f751e7d4c9" class="outline-2">
<h2 id="org-b851af71-d447-4b8f-8eac-13f751e7d4c9">Next Steps</h2>
<div class="outline-text-2" id="text-org-b851af71-d447-4b8f-8eac-13f751e7d4c9">
<p>
Once you've configured stylecop.json, you might want to fine-tune which rules
are enabled. Traditionally this is done with a <a href="https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/StyleCop.Analyzers/StyleCop.Analyzers.CodeFixes/rulesets/StyleCopAnalyzersDefault.ruleset">ruleset</a> file, which is, frankly,
a huge pain to create and edit by hand, especially if you're not using Visual
Studio. Luckily, the language server is capable of reading rules from
<a href="https://editorconfig.org/">.editorconfig</a> files.
</p>

<p>
First, ensure OmniSharp is configured to use .editorconfig by adding or editing
the omnisharp.json file located in the same directory as your generated csproj
files:
</p>

<div class="org-src-container">
<pre class="src src-json"><span style="color: #81A1C1;">{</span>
  <span style="color: #81A1C1;">"FormattingOptions"</span>: <span style="color: #B48EAD;">{</span>
    <span style="color: #81A1C1;">"enableEditorConfigSupport"</span>: <span style="color: #81A1C1;">true</span>
  <span style="color: #B48EAD;">}</span>
<span style="color: #81A1C1;">}</span>
</pre>
</div>

<p>
Then, create or add the following to your .editorconfig file in the same
directory.
</p>

<div class="org-src-container">
<pre class="src src-conf"><span style="color: #6f7787; font-style: italic;"># </span><span style="color: #6f7787; font-style: italic;">Remove the line below if you want to inherit</span>
<span style="color: #6f7787; font-style: italic;"># </span><span style="color: #6f7787; font-style: italic;">.editorconfig settings from higher directories</span>
<span style="color: #D8DEE9;">root</span> = true

<span style="color: #6f7787; font-style: italic;"># </span><span style="color: #6f7787; font-style: italic;">C# files</span>
[<span style="color: #8FBCBB;">*.cs</span>]

<span style="color: #6f7787; font-style: italic;"># </span><span style="color: #6f7787; font-style: italic;">EXAMPLE: Disable all naming convention analyzers.</span>
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1300.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1301.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1302.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1303.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1304.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1305.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1306.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1307.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1308.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1309.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1310.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1311.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1312.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1313.severity</span> = none
<span style="color: #D8DEE9;">dotnet_diagnostic.SA1314.severity</span> = none
</pre>
</div>

<p>
You can see the names of all of tweakable rules in the ruleset file linked
above.
</p>

<p>
<b>Sidenote:</b> OmniSharp provides an impressive number of custom .editorconfig
settings that can be used to unify and enforce your code style across a variety
of editors. Unfortunately, generating an extensive set of tweaks from scratch is
very difficult without Visual Studio, as a lot of the options aren't documented.
As is evident by this article, this is a frustrating pattern with a lot of C#
tooling that hopefully will improve in the future.
</p>
</div>
</div>
<div class="taglist"><a href="https://eliza.sh/tags.html">Tags</a>: <a href="https://eliza.sh/tag-unity.html">unity</a> <a href="https://eliza.sh/tag-csharp.html">csharp</a> </div>]]></description>
  <category><![CDATA[unity]]></category>
  <category><![CDATA[csharp]]></category>
  <link>https://eliza.sh/2022-01-30-using-stylecop-with-unity.html</link>
  <guid>https://eliza.sh/2022-01-30-using-stylecop-with-unity.html</guid>
  <pubDate>Sun, 30 Jan 2022 00:16:00 -0800</pubDate>
</item>
<item>
  <title><![CDATA[Using Unity Editor with Emacs]]></title>
  <description><![CDATA[
<p>
<i>Update <span class="timestamp-wrapper"><span class="timestamp">&lt;2022-07-31 Sun&gt;</span></span>: I have made a follow-up post <a href="https://eliza.sh/2022-07-31-using-unity-editor-with-emacs-(part-2).html">here</a> with more up-to-date
information.</i>
</p>

<p>
Let's skip right to the core of the issue: Unity is designed with the
expectation that you are using Visual Studio or Visual Studio Code for editing
C#, and using alternative editors with features such as LSP gets a bit tricky.
Fortunately, with a lot (a <i>lot</i>) of trial and error, I've found a way to
configure the two in a way that <i>exceeded</i> my expectations in how featureful and
pleasant of an experience it is to write code for Unity in Emacs.
</p>

<p>
An alternate title for this article could also be "Using Unity Editor with LSP
on a non-Windows OS", since a great portion of my difficulty involved figuring
out the idiosyncrasies of running OmniSharp on Linux. This guide still applies
to Windows, though.
</p>

<div id="outline-container-org-11dec5b3-3b13-48a2-b869-5f29482e1bf3" class="outline-2">
<h2 id="org-11dec5b3-3b13-48a2-b869-5f29482e1bf3">Foreground: What's LSP/OmniSharp?</h2>
<div class="outline-text-2" id="text-org-11dec5b3-3b13-48a2-b869-5f29482e1bf3">
<p>
In short: LSP (Language Server Protocol) provides almost all of the features you
could ever want from an IDE in any code editor which supports the protocol.
OmniSharp is such a server for C#, and a very powerful one at that. We will go
in depth about how to configure OmniSharp to work with Emacs later.
</p>
</div>
</div>

<div id="outline-container-org-7b590bee-5adf-47e7-a209-c98b4239a382" class="outline-2">
<h2 id="org-7b590bee-5adf-47e7-a209-c98b4239a382">Configuring Unity to Open Emacs</h2>
<div class="outline-text-2" id="text-org-7b590bee-5adf-47e7-a209-c98b4239a382">
<p>
The most obvious place to start is configuring Unity to open Emacs as its
external editor. Unfortunately, things aren't so simple, due to a bizarre quirk.
Unity automatically generates and maintains solution and project files, but
<i>only</i> if the external editor is configured to be Visual Studio, Visual Studio
Code, or MonoDevelop, despite the fact that theoretically any number of text
editors can benefit from OmniSharp.
</p>

<p>
The <a href="https://github.com/elizagamedev/unity.el"><code>unity.el</code></a> package provides a workaround to this issue by providing an
executable named <code>code</code> which tricks Unity into always generating the
solution/project files. <code>code</code> accepts the command line for the actual program
you wish to run as its arguments. To start <code>emacsclient</code>, my "External Script
Editor Args" field is set to the following:
</p>

<div class="org-src-container">
<pre class="src src-shell">emacsclient -n +$<span style="color: #81A1C1;">(</span>Line<span style="color: #81A1C1;">)</span>:$<span style="color: #81A1C1;">(</span>Column<span style="color: #81A1C1;">)</span> $<span style="color: #81A1C1;">(</span>File<span style="color: #81A1C1;">)</span>
</pre>
</div>

<p>
The package also provides some additional quality-of-life features for
interacting with Unity; see the GitHub page for more info on installation and
configuring.
</p>

<p>
For performance reasons, I would also recommend disabling every option for
"Generate <code>.csproj</code> files". OmniSharp will eagerly try to resolve each and every
Unity package, which is usually not necessary.
</p>

<p>
At this point, Unity will now generate the initial solution/project files when
you click "Regenerate project files" or when you open a C# source file via
Unity. You only need to do this once; Unity will automatically keep them
maintained.
</p>
</div>
</div>

<div id="outline-container-org-9124884c-7f4b-4fb6-b9dc-39e3a087356f" class="outline-2">
<h2 id="org-9124884c-7f4b-4fb6-b9dc-39e3a087356f">Configuring Emacs to use LSP with OmniSharp</h2>
<div class="outline-text-2" id="text-org-9124884c-7f4b-4fb6-b9dc-39e3a087356f">
</div>
<div id="outline-container-org-98c9f64c-d551-4e8b-ac90-a8d4704f502d" class="outline-3">
<h3 id="org-98c9f64c-d551-4e8b-ac90-a8d4704f502d">Prerequisite: (Linux, macOS) Install and Configure Mono</h3>
<div class="outline-text-3" id="text-org-98c9f64c-d551-4e8b-ac90-a8d4704f502d">
<p>
The Windows version of Unity will automatically install Visual Studio, which
provides all of the crunchy bits that make OmniSharp work out of the box.
Unfortunately, on other platforms, we have a bit of setup to do. The short
version is that the non-Windows, i.e. Mono-based, distributions of OmniSharp do
not come with a complete set of core assemblies for .NET, so we have to install
those ourselves.
</p>

<p>
I recommend using the official Mono releases instead of relying on your
distribution's package manager if possible. Luckily, it's quite easy to do so
via the <a href="https://www.mono-project.com/download/stable/">Mono download page</a>.
</p>

<p>
Once it's installed, we need to indicate to OmniSharp's <code>mono</code> invocation where
these newly installed assemblies can be found, via an environment variable. This
lifesaving piece of advice was provided by GitHub user R0flcopt3r <a href="https://github.com/OmniSharp/omnisharp-roslyn/issues/1948#issuecomment-694869256">here</a>. I simply
set it in my <code>init.el</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #81A1C1;">(</span>setenv <span style="color: #A3BE8C; font-style: italic;">"FrameworkPathOverride"</span> <span style="color: #A3BE8C; font-style: italic;">"/lib/mono/4.5"</span><span style="color: #81A1C1;">)</span>
</pre>
</div>

<p>
(The path on macOS is likely different, but I'm not certain.)
</p>
</div>
</div>

<div id="outline-container-org-e8ebf06c-a0d6-4140-a291-3a509f25f74c" class="outline-3">
<h3 id="org-e8ebf06c-a0d6-4140-a291-3a509f25f74c">Configuring <code>csharp-mode</code> and <code>lsp-mode</code></h3>
<div class="outline-text-3" id="text-org-e8ebf06c-a0d6-4140-a291-3a509f25f74c">
<p>
The actual elisp configuration is shockingly simple. (Note: I rely on use
<a href="https://github.com/jwiegley/use-package">use-package</a> here.)
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #81A1C1;">(</span><span style="color: #81A1C1;">use-package</span> <span style="color: #81A1C1;">lsp-mode</span>
  <span style="color: #81A1C1;">:ensure</span> t
  <span style="color: #81A1C1;">:bind-keymap</span>
  <span style="color: #B48EAD;">(</span><span style="color: #A3BE8C; font-style: italic;">"C-c l"</span> . lsp-command-map<span style="color: #B48EAD;">)</span>
  <span style="color: #81A1C1;">:custom</span>
  <span style="color: #B48EAD;">(</span>lsp-keymap-prefix <span style="color: #A3BE8C; font-style: italic;">"C-c l"</span><span style="color: #B48EAD;">)</span><span style="color: #81A1C1;">)</span>

<span style="color: #81A1C1;">(</span><span style="color: #81A1C1;">use-package</span> <span style="color: #81A1C1;">csharp-mode</span>
  <span style="color: #81A1C1;">:ensure</span> t
  <span style="color: #81A1C1;">:init</span>
  <span style="color: #B48EAD;">(</span><span style="color: #81A1C1;">defun</span> <span style="color: #88C0D0;">my/csharp-mode-hook</span> <span style="color: #A3BE8C;">()</span>
    <span style="color: #A3BE8C;">(</span><span style="color: #81A1C1;">setq-local</span> lsp-auto-guess-root t<span style="color: #A3BE8C;">)</span>
    <span style="color: #A3BE8C;">(</span>lsp<span style="color: #A3BE8C;">)</span><span style="color: #B48EAD;">)</span>
  <span style="color: #B48EAD;">(</span>add-hook 'csharp-mode-hook #'my/csharp-mode-hook<span style="color: #B48EAD;">)</span><span style="color: #81A1C1;">)</span>
</pre>
</div>

<p>
And&#x2026; that's it, really. There are a lot more awesome options to configure
<code>lsp-mode</code>, and I recommend exploring them if you haven't already.
</p>
</div>
</div>
</div>

<div id="outline-container-org-f1b7360f-d399-4dd1-96ee-c945be890ff8" class="outline-2">
<h2 id="org-f1b7360f-d399-4dd1-96ee-c945be890ff8">Other Considerations</h2>
<div class="outline-text-2" id="text-org-f1b7360f-d399-4dd1-96ee-c945be890ff8">
<p>
<code>lsp-mode</code> gains a massive performance boost if Emacs is built with native JSON
serialization and native elisp compilation. See <a href="https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation">this article</a> for more details. I
<i>highly</i> recommend giving it a try.
</p>
</div>
</div>
<div class="taglist"><a href="https://eliza.sh/tags.html">Tags</a>: <a href="https://eliza.sh/tag-unity.html">unity</a> <a href="https://eliza.sh/tag-emacs.html">emacs</a> <a href="https://eliza.sh/tag-csharp.html">csharp</a> </div>]]></description>
  <category><![CDATA[unity]]></category>
  <category><![CDATA[emacs]]></category>
  <category><![CDATA[csharp]]></category>
  <link>https://eliza.sh/2021-06-01-using-unity-editor-with-emacs.html</link>
  <guid>https://eliza.sh/2021-06-01-using-unity-editor-with-emacs.html</guid>
  <pubDate>Mon, 31 May 2021 17:00:00 -0700</pubDate>
</item>
</channel>
</rss>
